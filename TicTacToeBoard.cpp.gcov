        -:    0:Source:TicTacToeBoard.cpp
        -:    0:Graph:TicTacToeBoard.gcno
        -:    0:Data:TicTacToeBoard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "TicTacToeBoard.h"
        -:    2:/**
        -:    3: * Class for representing a 3x3 Tic-Tac-Toe game board, using the Piece enum
        -:    4: * to represent the spaces on the board.
        -:    5:**/
        -:    6:
        -:    7://Constructor sets an empty board and specifies it is X's turn first
        5:    8:TicTacToeBoard::TicTacToeBoard()
        -:    9:{
        5:   10:  turn = X;
       20:   11:  for(int i=0; i<BOARDSIZE; i++)
       60:   12:    for(int j=0; j<BOARDSIZE; j++)
       45:   13:      board[i][j] = Blank;
        5:   14:}
        -:   15:
        -:   16:/**
        -:   17: * Switches turn member variable to represent whether it's X's or O's turn
        -:   18: * and returns whose turn it is
        -:   19:**/
        3:   20:Piece TicTacToeBoard::toggleTurn()
        -:   21:{
        3:   22:  if (turn == X)
        -:   23:  {
        2:   24:    turn = O;
        2:   25:    return O;
        -:   26:  } else {
        1:   27:    turn = X;
        1:   28:    return X;
        -:   29:  }
        -:   30:}
        -:   31:
        -:   32:/**
        -:   33: * Places the piece of the current turn on the board, returns what
        -:   34: * piece is placed, and toggles which Piece's turn it is. placePiece does 
        -:   35: * NOT allow to place a piece in a location where there is already a piece.
        -:   36: * In that case, placePiece just returns what is already at that location. 
        -:   37: * Out of bounds coordinates return the Piece Invalid value. When the game
        -:   38: * is over, no more pieces can be placed so attempting to place a piece
        -:   39: * should neither change the board nor change whose turn it is.
        -:   40:**/ 
        2:   41:Piece TicTacToeBoard::placePiece(int row, int column)
        -:   42:{
        2:   43:  if (board[row][column] == ' ')
        -:   44:  {
        2:   45:    Piece new_place = turn;
        2:   46:    board[row][column] = new_place;
        2:   47:    return new_place;
        -:   48:  }
    #####:   49:  return Invalid;
        -:   50:}
        -:   51:
        -:   52:/**
        -:   53: * Returns what piece is at the provided coordinates, or Blank if there
        -:   54: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   55:**/
        2:   56:Piece TicTacToeBoard::getPiece(int row, int column)
        -:   57:{
        2:   58:  if (board[row][column] == ' ')
        1:   59:    return Blank;
        1:   60:  if (row > BOARDSIZE || column > BOARDSIZE)
    #####:   61:    return Invalid;
        1:   62:  return board[row][column];
        -:   63:}
        -:   64:
        -:   65:/**
        -:   66: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:   67: * is not over, or Blank if the board is filled and no one has won.
        -:   68:**/
    #####:   69:Piece TicTacToeBoard::getWinner()
        -:   70:{
    #####:   71:  return Invalid;
        -:   72:}
